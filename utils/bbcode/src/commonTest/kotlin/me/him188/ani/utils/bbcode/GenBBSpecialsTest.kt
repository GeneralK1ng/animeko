/*
 * Copyright (C) 2024-2025 OpenAni and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license, which can be found at the following link.
 *
 * https://github.com/open-ani/ani/blob/main/LICENSE
 */

// @formatter:off
@file:Suppress("RedundantVisibilityModifier")

// Generated by me.him188.ani.utils.bbcode.BBCodeTestGenerator
package me.him188.ani.utils.bbcode

import kotlin.test.Test

public class GenBBSpecialsTest : BBCodeParserTestHelper() {
    @Test
    public fun parse1488478815() {
        BBCode.parse("[b] /[][/]Hello [/b]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", bold=true)
        }
    }

    @Test
    public fun parse1553193377() {
        BBCode.parse("[B] /[][/]Hello [/B]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", bold=true)
        }
    }

    @Test
    public fun parse127856769() {
        BBCode.parse("[i] /[][/]Hello [/i]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", italic=true)
        }
    }

    @Test
    public fun parse1125438335() {
        BBCode.parse("[I] /[][/]Hello [/I]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", italic=true)
        }
    }

    @Test
    public fun parse1671584257() {
        BBCode.parse("[u] /[][/]Hello [/u]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", underline=true)
        }
    }

    @Test
    public fun parse418289153() {
        BBCode.parse("[U] /[][/]Hello [/U]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", underline=true)
        }
    }

    @Test
    public fun parse17359423() {
        BBCode.parse("[s] /[][/]Hello [/s]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", strikethrough=true)
        }
    }

    @Test
    public fun parse1270654527() {
        BBCode.parse("[S] /[][/]Hello [/S]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", strikethrough=true)
        }
    }

    @Test
    public fun parse493385023() {
        BBCode.parse("[url] /[][/]Hello [/url]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", jumpUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse1934639423() {
        BBCode.parse("[URL] /[][/]Hello [/URL]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", jumpUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse1015657025() {
        BBCode.parse("[img] /[][/]Hello [/img]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse425597375() {
        BBCode.parse("[IMG] /[][/]Hello [/IMG]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse1294424479() {
        BBCode.parse("[quote] /[][/]Hello [/quote]")
        .run {
            assertQuote(elements.at(0)) {
                assertText(elements.at(0), value=" /[][/]Hello ")
            }
        }
    }

    @Test
    public fun parse1660890527() {
        BBCode.parse("[QUOTE] /[][/]Hello [/QUOTE]")
        .run {
            assertQuote(elements.at(0)) {
                assertText(elements.at(0), value=" /[][/]Hello ")
            }
        }
    }

    @Test
    public fun parse1274924885() {
        BBCode.parse("[code] /[][/]Hello [/code]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", code=true)
        }
    }

    @Test
    public fun parse1794490197() {
        BBCode.parse("[CODE] /[][/]Hello [/CODE]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", code=true)
        }
    }

    @Test
    public fun parse1772059667() {
        BBCode.parse("[mask] /[][/]Hello [/mask]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", mask=true)
        }
    }

    @Test
    public fun parse2003342317() {
        BBCode.parse("[MASK] /[][/]Hello [/MASK]")
        .run {
            assertText(elements.at(0), value=" /[][/]Hello ", mask=true)
        }
    }

    @Test
    public fun parse1613175077() {
        BBCode.parse("[img=300,200] /[][/]Hello [/img]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ", width=300, height=200)
        }
    }

    @Test
    public fun parse50537791() {
        BBCode.parse("[img=300,200] /[][/]Hello [/img=300,200]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ", width=300, height=200)
        }
    }

    @Test
    public fun parse664604991() {
        BBCode.parse("[IMG=300,200] /[][/]Hello [/IMG=300,200]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ", width=300, height=200)
        }
    }

    @Test
    public fun parse409214251() {
        BBCode.parse("[img=300] /[][/]Hello [/img]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse485058943() {
        BBCode.parse("[img=300] /[][/]Hello [/img=300]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse1890993535() {
        BBCode.parse("[IMG=300] /[][/]Hello [/IMG=300]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse429646862() {
        BBCode.parse("[img=,200] /[][/]Hello [/img]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse204343675() {
        BBCode.parse("[img=,200] /[][/]Hello [/img=,200]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }

    @Test
    public fun parse1950256709() {
        BBCode.parse("[IMG=,200] /[][/]Hello [/IMG=,200]")
        .run {
            assertImage(elements.at(0), imageUrl=" /[][/]Hello ")
        }
    }
}


// @formatter:on
